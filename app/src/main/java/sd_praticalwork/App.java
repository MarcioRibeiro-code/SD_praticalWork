/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sd_praticalwork;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.Socket;

import com.google.gson.Gson;

import Entity.MilitarType;
import Entity.User;
import Requests.Login;
import Requests.UserRegister;
import utils.Channel.SendMessageToChannel;
import utils.Requests.Request;
import utils.Requests.RequestType;

public class App {

    private static final String SERVER_ADDRESS = "localhost";
    private static final int SERVER_PORT = 2048;

    public static void main(String[] args) {
        try {
            Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
            /*
             * UserRegister register = new UserRegister(new User("Jo√£o",
             * MilitarType.SOLDIER.name(), "123", "joao"));
             * // convert the register object to json
             * String registerRequest = new Gson().toJson(new
             * Request<>(RequestType.REGISTER, register));
             * writer.write(registerRequest);
             * writer.newLine();
             * writer.flush();
             * 
             * // Receive and print server response
             * String registrationResponse = reader.readLine();
             * System.out.println("Server response: " + registrationResponse);
             */

            // User login
            System.out.println("\nLogin:");
            Login login = new Login("joao", "123");

            // convert the login object to json
            String loginRequest = new Gson().toJson(new Request<>(RequestType.LOGIN, login));
            writer.write(loginRequest);
            writer.newLine();
            writer.flush();

            // Receive and print server response
            String loginResponse = reader.readLine();
            System.out.println("Server response: " + loginResponse);

            // send message to channel
            System.out.println("\nSend message to channel:");
            SendMessageToChannel sendMessageToChannel = new SendMessageToChannel("main", "Hello world!");
            String sendMessageToChannelRequest = new Gson()
                    .toJson(new Request<>(RequestType.SEND_MESSAGE_TO_CHANNEL, sendMessageToChannel));
            writer.write(sendMessageToChannelRequest);
            writer.newLine();
            writer.flush();

            // Receive and print server response
            String sendMessageToChannelResponse = reader.readLine();
            System.out.println("Server response: " + sendMessageToChannelResponse);

            // Close resources

            socket.close();
            reader.close();
            writer.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}